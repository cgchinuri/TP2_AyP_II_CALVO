#ifndef CASILLERO_H_
#define CASILLERO_H_

class Casillero
{
	private:
		// Atributos de posción
		int x;
		int y;
		int z;

		// Punteros a casilleros aledaños
		Casillero * sigX;
		Casillero * antX;
		Casillero * sigY;
		Casillero * antY;
		Casillero * sigZ;
		Casillero * antZ;

		// Tipo del casillero
		tipoCasillero_t tipoCasillero;

		// Turnos de inactividad restantes
		int turnosInactivoRestantes;

		// Puntero a objeto que lo ocupa:


	public:
		// Constructor
		// Recibe como argumento la posición y crea el casillero
		Casillero(int x, int y, int z);
		// Pre: -
		// Pos: devuelve la posición en X
		int getPosX();
		// Pre: -
		// Pos: devuelve la posición en Y
		int getPosY();
		// Pre: -
		// Pos: devuelve la posición en Z
		int getPosZ();

		// Pre: hay que pasarle un puntero a casillero
		// Pos: queda apuntando a ese casillero como siguiente en X
		void setSigX(Casillero * casillero);

		// Pre: hay que pasarle un puntero a casillero
		// Pos: queda apuntando a ese casillero como anterior en X
		void setAntX(Casillero * casillero);

		// Pre: hay que pasarle un puntero a casillero
		// Pos: queda apuntando a ese casillero como siguiente en Y
		void setSigY(Casillero * casillero);

		// Pre: hay que pasarle un puntero a casillero
		// Pos: queda apuntando a ese casillero como anterior en Y
		void setAntY(Casillero * casillero);

		// Pre: hay que pasarle un puntero a casillero
		// Pos: queda apuntando a ese casillero como siguiente en Z
		void setSigZ(Casillero * casillero);

		// Pre: hay que pasarle un puntero a casillero
		// Pos: queda apuntando a ese casillero como anterior en Z
		void setAntZ(Casillero * casillero);


}

typedef enum
{
	tierra,
	agua,
	aire
}tipoCasillero_t;



#endif // CASILLERO_H_
