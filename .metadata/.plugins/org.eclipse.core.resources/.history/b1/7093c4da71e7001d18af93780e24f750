#include <iostream>

#include "tablero.h"

Tablero::Tablero(int dimX, int dimY, int dimZ)
{
	this->dimX = dimX;
	this->dimY = dimY;
	this->dimZ = dimZ;

	Casillero * casilleroNuevo = NULL;
	Casillero * casilleroAnterior = NULL;

	Casillero * inicioFilaNueva = NULL;
	Casillero * inicioFilaAnterior = NULL;

	Casillero * inicioPisoNuevo = NULL;
	Casillero * inicioPisoAnterior = NULL;

	this->listaCasillerosInactivos = NULL;

	tipoCasillero_t tipoCasillero = tierra;



	for(int z = 1 ; z <= dimZ ; z++)
	{
		for(int y = 1 ; y <= dimY ; y++)
		{

			for(int x = 1 ; x <= dimX ; x++)
			{
				casilleroNuevo = new Casillero(x,y,z,tipoCasillero);

				casilleroNuevo->setAntX(casilleroAnterior);

				if(casilleroAnterior)
				{
					casilleroAnterior->setSigX(casilleroNuevo);
				}

				casilleroAnterior=casilleroNuevo;

				if(x==1 && y== 1 && z == 1)
				{
					this->casilleroInicial = casilleroNuevo;
				}
				if(x==1 && y== 1 && casilleroNuevo != this->casilleroInicial)
				{
					inicioPisoAnterior = inicioPisoNuevo;
					inicioPisoNuevo = casilleroNuevo;

					inicioPisoAnterior->setSigZ(inicioPisoNuevo);
					inicioPisoNuevo->setAntZ(inicioPisoAnterior);
				}
				if(x==1 && casilleroNuevo != inicioPisoNuevo)
				{
					inicioFilaAnterior = inicioFilaNueva;
					inicioFilaNueva = casilleroNuevo;

					inicioFilaAnterior->setSigY(inicioFilaNueva);
					inicioFilaNueva-> setAntY(inicioFilaAnterior);
				}
			}
		}
	}
	// En este punto tengo todos los casilleros uno atrás del otro en X

	//this->separarY();
}

void Tablero::separarY()
{
	Casillero * casilleroInicioFilaAnterior;
	Casillero * casilleroInicioFilaPosterior;
	Casillero * casilleroAux;
	Casillero * casilleroAux2;

	casilleroInicioFilaAnterior = this->casilleroInicial;
	casilleroAux = this->casilleroInicial;

	for(int z = 1 ; z <= this->dimZ ; z++)
	{
		for(int y = 1 ; y < this->dimY ; y++)
		{
			for(int x = 1 ; x < this->dimX ; x ++)
			{
				casilleroAux = casilleroAux->getSigX();
			}

			casilleroInicioFilaPosterior = casilleroAux->getSigX();

			// Desenlazo en X el ultimo casillero de una fila
			// con el primero de la siguiente
			casilleroAux->setSigX(NULL);
			casilleroInicioFilaPosterior->setAntX(NULL);

			// Cargo punteros auxiliares para enlazar en Y
			casilleroAux = casilleroInicioFilaAnterior;
			casilleroAux2 = casilleroInicioFilaPosterior;

			// Enlazo en Y hasta que llegue al final de la primera fila
			for(int x = 1 ; x <= this->dimX ; x ++)
			{
				// Enlazo casilleros aledaños en Y
				casilleroAux->setSigY(casilleroAux2);
				casilleroAux2->setAntY(casilleroAux);

				// Me muevo en X
				casilleroAux = casilleroAux->getSigX();
				casilleroAux2 = casilleroAux2->getSigX();
			}

			// Antes de continuar con la iteración tomo el inicio
			// de la fila posterior como anterior
			casilleroInicioFilaAnterior = casilleroInicioFilaPosterior;
			casilleroAux = casilleroInicioFilaPosterior;
		}
	}
}



void Tablero::imprimirTablero()
{
	Casillero * casilleroAux = this->casilleroInicial;
	Casillero * casilleroInicioFila = this->casilleroInicial;

	std::cout << "Paso previo al while" << std::endl;

	for(int z = 1 ; z <= this->dimZ ; z++)
	{
		for(int y = 1 ; y <= this->dimY ; y++)
		{
			for(int x = 1 ; x <= this->dimX ; x++)
			{
				std::cout << "Casillero: ";
				std::cout << casilleroAux->getPosX() << ", " << casilleroAux->getPosY() << ", " << casilleroAux->getPosZ() << ", " << casilleroAux->getTipoCasillero() << std::endl;

				casilleroAux = casilleroAux->getSigX();
			}

			casilleroInicioFila = casilleroInicioFila->getSigY();

			casilleroAux = casilleroInicioFila;
		}
	}
}
